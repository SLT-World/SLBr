<!--Copyright © 2022 SLT World. All rights reserved.
Use of this source code is governed by a GNU license that can be found in the LICENSE file.-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SLBr"
                    x:Class="SLBr.StyleResourceDictionary">
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Color x:Key="GainsboroColor">Gainsboro</Color>
    <Color x:Key="WhiteColor">White</Color>
    <Color x:Key="WhiteSmokeColor">WhiteSmoke</Color>
    <Color x:Key="GrayColor">Gray</Color>
    <Color x:Key="BlackColor">Black</Color>
    <Color x:Key="BlueColor">#0092FF</Color>

    <XmlDataProvider x:Key="NewsRSSFeed" Source="https://news.google.com/rss" XPath="rss/channel"/>

    <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource GainsboroColor}"/>
    <SolidColorBrush x:Key="PrimaryBrush" Color="{DynamicResource WhiteColor}"/>
    <SolidColorBrush x:Key="UnselectedTabBrush" Color="{DynamicResource WhiteSmokeColor}"/>
    <SolidColorBrush x:Key="ControlFontBrush" Color="{DynamicResource GrayColor}"/>
    <SolidColorBrush x:Key="FontBrush" Color="{DynamicResource BlackColor}"/>
    <SolidColorBrush x:Key="_Blue" Color="{DynamicResource BlueColor}"/>

    <Style x:Key="FavouriteUrlButton" TargetType="{x:Type Button}">
        <Setter Property="Tag" Value="12"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource FontBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="MaxWidth" Value="150"/>
        <Setter Property="FontFamily" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="TextWrapping" Value="NoWrap"/>
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis"></Setter>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ControlFontBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DownloadItemButton" TargetType="{x:Type Button}">
        <Setter Property="Tag" Value="13"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Width" Value="250"/>
        <Setter Property="FontFamily" Value="None"/>
        <Setter Property="Margin" Value="2.5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="2.5">
                        <Grid>
                            <ContentPresenter x:Name="contentPresenter" Width="75" Focusable="False" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center">
                                <ContentPresenter.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextWrapping" Value="NoWrap"/>
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis"></Setter>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                            <ProgressBar Margin="75,0,0,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource BorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AddButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource FontBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{DynamicResource BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="{DynamicResource BorderBrush}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard FillBehavior="Stop">
                                        <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="Transparent"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="Transparent"/>
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="Transparent"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard FillBehavior="Stop">
                                        <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" To="Transparent"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AddTabButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource FontBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="5,5,0,0">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource FontBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource FontBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Background="{DynamicResource PrimaryBrush}" TextBlock.Foreground="{DynamicResource FontBrush}" x:Name="Border" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10" Padding="5,2">
                        <ScrollViewer x:Name="PART_ContentHost">
                        </ScrollViewer>
                        <!--<TextBlock Text="Example: https://google.com/search?q=" Margin="5" FontSize="7.5" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource _Blue}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="Width" Value="Auto">
                            <Setter Property="MinWidth" Value="100"/>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource FontBrush}"/>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
              Width="15" 
              Height="15" 
              CornerRadius="3.5" 
              Background="Transparent"
              BorderThickness="1"
              BorderBrush="{DynamicResource BorderBrush}">
                                <Path 
                Width="7" Height="7" 
                x:Name="CheckMark"
                SnapsToDevicePixels="False" 
                Stroke="{DynamicResource PrimaryBrush}"
                StrokeThickness="2"
                Data="M 0 7 L 7 0" /><!--M 0 0 L 7 7 -->
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource _Blue}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource _Blue}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border Background="{DynamicResource UnselectedTabBrush}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="10">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Background="{DynamicResource PrimaryBrush}" CornerRadius="8,8,0,0">
                                <Label Grid.Row="0" Foreground="White">
                                    <ContentPresenter Margin="5" ContentSource="Header" RecognizesAccessKey="True" TextBlock.Foreground="{DynamicResource FontBrush}"/>
                                </Label>
                            </Border>
                            <ContentPresenter Grid.Row="1" Margin="4"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="TabControl" x:Key="SettingsTabControl">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TabStripPlacement" Value="left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TabPanel Grid.Column="0" Panel.ZIndex="1" Margin="25,25,25,25"  IsItemsHost="True" Background="Transparent"/>

                        <Border Grid.Column="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Width="1"/>

                        <DockPanel LastChildFill="True" Grid.Column="1" SnapsToDevicePixels="true" Margin="20,20,20,20">
                            <Border DockPanel.Dock="Left" MaxWidth="512.5" HorizontalAlignment="Left">
                                <ScrollViewer VerticalScrollBarVisibility="Hidden">
                                    <ContentPresenter ContentSource="SelectedContent"/>
                                </ScrollViewer>
                            </Border>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}" x:Key="SettingsTab">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <!-- Tab item header -->
                    <Border Name="border" 
                        SnapsToDevicePixels="True" 
                        BorderThickness="0" 
                        Padding="5,7.5,5,7.5"
                        Margin="0,2.5" CornerRadius="5">
                        <TextBlock Name="buttonText" 
                                Margin="5,0" 
                                FontSize="14" 
                                Foreground="{DynamicResource FontBrush}" 
                                Text="{TemplateBinding Header}" 
                                VerticalAlignment="Center" Width="200"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource BorderBrush}"/>
                            </Trigger.Setters>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource UnselectedTabBrush}"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ContextMenu x:Key="TabContextMenu" x:Name="TabContextMenu">
        <MenuItem x:Name="CloseTabMenuItem" Header="Close Tab" FontFamily="Arial" Foreground="Black" Tag="7"/>
    </ContextMenu>
    <Style TargetType="TabItem">
        <!--<Setter Property="ContextMenu" Value="{StaticResource TabContextMenu}"/>-->
        <Setter Property="AllowDrop" Value="True"/>
        <EventSetter Event="PreviewMouseMove" Handler="TabItem_PreviewMouseMove"/>
        <EventSetter Event="Drop" Handler="TabItem_Drop"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="5,5,0,0" Margin="0,0">
                        <StackPanel Orientation="Horizontal">
                            <Button x:Name="CloseTabButton" Click="ButtonAction" Style="{DynamicResource AddButton}" Tag="7" Width="20" Height="20" Margin="5,0,0,0">
                                <!--Click="ButtonAction"-->
                                <Path Data="M68.55,0 2.92,65.63 202.73,265.45 -0,468.18 65.63,533.81 268.37,331.08 469.64,532.36 535.27,466.72 334,265.45 532.36,67.09 466.72,1.46 268.37,199.82 Z" Fill="{DynamicResource FontBrush}" Height="5" Width="5" Stretch="Fill" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Button>
                            <Path SnapsToDevicePixels="True" MaxHeight="15" MaxWidth="15" Stretch="Uniform" Margin="2.5,0" Stroke="{DynamicResource FontBrush}" StrokeThickness="0.5" Visibility="Collapsed" x:Name="TabIcon" Data="M385 3961 c-48 -22 -79 -54 -100 -103 -13 -33 -15 -208 -15 -1556 0 -1682 -4 -1579 66 -1660 20 -24 59 -55 88 -70 l51 -27 1785 0 1785 0 48 24 c63 31 123 101 142 164 13 44 15 250 15 1567 0 1106 -3 1526 -11 1551 -16 45 -55 87 -104 110 -38 18 -110 19 -1875 19 -1763 0 -1837 -1 -1875 -19z m3685 -1381 l0 -1220 -1265 0 -1265 0 0 -275 c0 -310 -4 -334 -60 -354 -45 -15 -924 -16 -969 0 -65 23 -61 -82 -61 1562 0 821 3 1497 7 1500 3 4 818 7 1810 7 l1803 0 0 -1220z m-2 -1590 c2 -126 -1 -194 -9 -214 -25 -58 25 -56 -1220 -56 -1083 0 -1141 1 -1133 18 5 9 10 113 12 230 l3 212 1172 -2 1172 -3 3 -185z"/>
                            <Image MaxHeight="15" MaxWidth="15" Stretch="Uniform" Margin="2.5,0" Source ="https://google.com/s2/favicons?domain=example.com" x:Name="Icon"/>
                            <ContentPresenter TextBlock.Foreground="{DynamicResource FontBrush}" Margin="2.5,5,2.5,5" x:Name="ContentSite" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" MaxWidth="250" TextBlock.FontFamily="None">
                                <ContentPresenter.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextWrapping" Value="NoWrap"/>
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                            <Grid x:Name="RightPadding" Margin="0,0,5,0"/>
                            <!--<Button Margin="0,0,5,0" Height="20" Width="20" x:Name="PinButton" ToolTip="Pin" Click="ButtonAction" Style="{DynamicResource AddButton}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Content="&#xE840;" Foreground="{DynamicResource FontBrush}" Tag="21" FontSize="10"/>-->
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter TargetName="CloseTabButton" Property="Visibility" Value="Visible"/>
                            <!--<Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>-->
                            <Setter TargetName="Icon" Property="Margin" Value="2.5,0"/>
                            <Setter TargetName="TabIcon" Property="Margin" Value="2.5,0"/>
                            <!--<Setter TargetName="ContentSite" Property="Margin" Value="2.5,5,2.5,5"/>-->
                            <!--<Setter Property="ContextMenu" Value="{StaticResource TabContextMenu}"/>-->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <!--<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>-->
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource UnselectedTabBrush}"/>
                            <Setter TargetName="CloseTabButton" Property="Visibility" Value="Collapsed"/>
                            <!--<Setter TargetName="PinButton" Property="Visibility" Value="Collapsed"/>-->
                            <Setter TargetName="Icon" Property="Margin" Value="5,0,2.5,0"/>
                            <Setter TargetName="TabIcon" Property="Margin" Value="5,0,2.5,0"/>
                            <!--<Setter TargetName="ContentSite" Property="Margin" Value="2.5,5,5,5"/>-->
                            <!--<Setter TargetName="RightPadding" Property="Visibility" Value="Collapsed"/>-->
                            <!--<Setter Property="ContextMenu" Value="{x:Null}"/>-->
                            <!--<Setter TargetName="TabIcon" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>-->
                        </Trigger>
                        <!--<Trigger Property="Header" Value="New Tab">
                            --><!--<Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>--><!--
                            <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="{DynamicResource ControlFontBrush}"/>
                            --><!--<Setter Property="ContextMenu" Value="{x:Null}"/>-->
                            <!--<Setter TargetName="TabIcon" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>--><!--
                        </Trigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="{DynamicResource BorderBrush}"/>-->
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local"
							  SnapsToDevicePixels="true"
							  ClipToBounds="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1"
												  Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0"
											   Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1"
											   Height="*"/>
                        </Grid.RowDefinitions>
                        <local:TabPanel
									x:Name="HeaderPanel"
									Panel.ZIndex ="1" 
									KeyboardNavigation.TabIndex="1"
									Grid.Column="0"
									Grid.Row="0"
									Margin="2,2,2,0"
									IsItemsHost="true"/>
                        <Border x:Name="ContentPanel"
									Background="{TemplateBinding Background}"
									BorderThickness="0"
									BorderBrush="{TemplateBinding BorderBrush}"
									KeyboardNavigation.TabNavigation="Local"
									KeyboardNavigation.DirectionalNavigation="Contained"
									KeyboardNavigation.TabIndex="2"
									Grid.Column="0"
									Grid.Row="1">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												  Margin="0"
												  ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
              BorderBrush="{DynamicResource BorderBrush}" 
              CornerRadius="10" BorderThickness="1" 
              Background="{DynamicResource PrimaryBrush}"/>
            <Border Grid.Column="1" Margin="1" BorderBrush="{DynamicResource BorderBrush}"  Name="ButtonBorder"
              CornerRadius="10" BorderThickness="0" 
              Background="{DynamicResource PrimaryBrush}" />

            <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="#444"
            VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource BorderBrush}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource BorderBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="7.5, 2.5, 23, 2.5" IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="{DynamicResource PrimaryBrush}" Margin="0, 1, 0, 0"
                        BorderThickness="1" 
                        BorderBrush="{DynamicResource BorderBrush}" CornerRadius="5"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <!--<Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>-->
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HasDropShadow" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border" Background="{DynamicResource PrimaryBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Padding="0,5" CornerRadius="5">
                        <ContentPresenter TextBlock.Foreground="{DynamicResource FontBrush}" TextBlock.FontFamily="None" MaxWidth="500" Margin="10,0">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="TextWrapping" Value="NoWrap"/>
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                        <!--<TextBlock FontFamily="None" Margin="10,0" Text="{TemplateBinding Content}"/>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="Transparent" BorderThickness="0" VerticalAlignment="Center">
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="Border" Background="{StaticResource PrimaryBrush}" BorderBrush="{StaticResource BorderBrush}" BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <Style x:Key="MenuScrollButton"
       TargetType="{x:Type RepeatButton}"
       BasedOn="{x:Null}">
        <Setter Property="ClickMode"
            Value="Hover"/>
        <Setter Property="MinWidth"
            Value="0"/>
        <Setter Property="MinHeight"
            Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent"
                     SnapsToDevicePixels="true">
                        <!--right -->
                        <Rectangle DockPanel.Dock="Right"
                       x:Name="R1"
                       Width="1"
                       Fill="Transparent"/>
                        <!--bottom-->
                        <Rectangle DockPanel.Dock="Bottom"
                       x:Name="B1"
                       Height="1"
                       Fill="Transparent"/>
                        <!--left  -->
                        <Rectangle DockPanel.Dock="Left"
                       x:Name="L1"
                       Width="1"
                       Fill="Transparent"/>
                        <!--top   -->
                        <Rectangle DockPanel.Dock="Top"
                       x:Name="T1"
                       Height="1"
                       Fill="Transparent"/>
                        <ContentPresenter x:Name="ContentContainer"
                              Margin="2,2,2,2"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                     Value="true">
                            <Setter TargetName="R1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter TargetName="B1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter TargetName="L1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter TargetName="T1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter TargetName="ContentContainer"
                      Property="Margin"
                      Value="3,3,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuScrollViewer"
         TargetType="{x:Type ScrollViewer}"
         BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility"
            Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility"
            Value="Auto"/>
        <Setter Property="Padding" Value="0,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <!--ScrollViewer for a MenuItem-->
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                    Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <RepeatButton
                          Style="{StaticResource MenuScrollButton}"
                          Grid.Row="0"
                          Grid.Column="0"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ComputedVerticalScrollBarVisibility"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="VerticalOffset"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ExtentHeight"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ViewportHeight"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                    Data="{StaticResource UpArrow}"/>
                        </RepeatButton>
                        <RepeatButton
                          Style="{StaticResource MenuScrollButton}"
                          Grid.Row="2"
                          Grid.Column="0"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ComputedVerticalScrollBarVisibility"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="VerticalOffset"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ExtentHeight"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ViewportHeight"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                    Data="{StaticResource DownArrow}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,2.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Margin="5,0" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter 
          Margin="6,3,6,3" 
          ContentSource="Header"
          RecognizesAccessKey="True" />
                <Popup 
          Name="Popup"
          Placement="Bottom"
          IsOpen="{TemplateBinding IsSubmenuOpen}"
          AllowsTransparency="True" 
          Focusable="False"
          PopupAnimation="Fade">
                    <Border 
            Name="SubmenuBorder"
            SnapsToDevicePixels="True"
            Background="{DynamicResource PrimaryBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="1" CornerRadius="10">
                        <ScrollViewer CanContentScroll="True" 
              Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <!--Snippettoplevelheader-->
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="5"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0"/>
            </Trigger>
            <!--/Snippettoplevelheader-->
            <!--<Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- TopLevelItem -->

    <ControlTemplate 
    x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
    TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter 
          Margin="6,3,6,3" 
          ContentSource="Header"
          RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <!--<Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->

    <ControlTemplate 
    x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
    TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
          Name="Icon"
          Margin="10,10,0,10"
          VerticalAlignment="Center"
          ContentSource="Icon"/>
                <Border 
          Name="Check"  
          Width="13" Height="13" 
          Visibility="Collapsed"
          Margin="6,0,6,0" 
          Background="Green"
          BorderThickness="1"
          BorderBrush="Yellow">
                    <Path 
            Name="CheckMark"
            Width="7" Height="7" 
            Visibility="Hidden" 
            SnapsToDevicePixels="False" 
            Stroke="{DynamicResource FontBrush}"
            StrokeThickness="2"
            Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
          Name="HeaderHost"
          Grid.Column="1"
          ContentSource="Header"
          RecognizesAccessKey="True" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource FontBrush}"/>
                <TextBlock x:Name="InputGestureText"
          Grid.Column="2"
          Text="{TemplateBinding InputGestureText}"
          Margin="5,2,0,2"
          DockPanel.Dock="Right" Foreground="{DynamicResource ControlFontBrush}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
            </Trigger>
            <!--<Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->

    <ControlTemplate 
    x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
    TargetType="{x:Type MenuItem}">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
          Name="Icon"
          Margin="6,0,6,0"
          VerticalAlignment="Center"
          ContentSource="Icon"/>
                <ContentPresenter 
          Name="HeaderHost"
          Grid.Column="1"
          ContentSource="Header"
          RecognizesAccessKey="True" VerticalAlignment="Center" Margin="10,2.5,50,2.5" TextBlock.Foreground="{DynamicResource FontBrush}"/>
                <TextBlock x:Name="InputGestureText"
          Grid.Column="2"
          Text="{TemplateBinding InputGestureText}"
          Margin="5,2,2,2"
          DockPanel.Dock="Right" Foreground="{DynamicResource ControlFontBrush}"/>
                <Path 
          Grid.Column="3"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Data="M 0 0 L 0 7 L 4 3.5 Z" 
          Fill="{DynamicResource FontBrush}" />
                <Popup 
          Name="Popup"
          Placement="Right"
          VerticalOffset="-9"
          HorizontalOffset="0" 
          IsOpen="{TemplateBinding IsSubmenuOpen}"
          AllowsTransparency="True" 
          Focusable="False"
          PopupAnimation="Fade">
                    <Border 
            Name="SubmenuBorder"
            SnapsToDevicePixels="True"
            Background="{DynamicResource PrimaryBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="1" >
                        <ScrollViewer CanContentScroll="True"
              Style="{StaticResource MenuScrollViewer}">
                            <StackPanel  
              IsItemsHost="True" 
              KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <!--<Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="UseLayoutRounding"
            Value="True"/>
        <Setter Property="SnapsToDevicePixels"
            Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>